# name: 'Terraform CI/CD Pipeline'

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   TF_VERSION: '1.7.4'

# jobs:
#   terraform:
#     name: 'Terraform Format, Validate, Plan, and Apply'
#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         environment: [dev, prod]

#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v4

#       - name: Check if environment folder exists
#         id: check-dir
#         run: |
#           if [ ! -d "./envs/${{ matrix.environment }}" ]; then
#             echo "skip=true" >> $GITHUB_OUTPUT
#           else
#             echo "skip=false" >> $GITHUB_OUTPUT
#           fi

#       - name: Set up Terraform
#         if: steps.check-dir.outputs.skip == 'false'
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TF_VERSION }}

#       - name: Terraform Init
#         if: steps.check-dir.outputs.skip == 'false'
#         working-directory: ./envs/${{ matrix.environment }}
#         run: terraform init

#       - name: Terraform Format
#         if: steps.check-dir.outputs.skip == 'false'
#         working-directory: ./envs/${{ matrix.environment }}
#         run: terraform fmt -check -recursive

#       - name: Terraform Validate
#         if: steps.check-dir.outputs.skip == 'false'
#         working-directory: ./envs/${{ matrix.environment }}
#         run: terraform validate

#       - name: Terraform Plan
#         if: steps.check-dir.outputs.skip == 'false'
#         working-directory: ./envs/${{ matrix.environment }}
#         run: terraform plan -out=tfplan

#       - name: Terraform Apply (only on main)
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-dir.outputs.skip == 'false'
#         working-directory: ./envs/${{ matrix.environment }}
#         run: terraform apply -auto-approve tfplan
#         env:
#           ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#           ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#           ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#           ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: '1.7.4'

jobs:
  terraform:
    name: 'Terraform Format, Validate, Plan, and Apply'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, prod]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Check if environment folder exists
        id: check-dir
        run: |
          echo "Checking for ./envs/${{ matrix.environment }}..."
          if [ ! -d "./envs/${{ matrix.environment }}" ]; then
            echo "Directory ./envs/${{ matrix.environment }} not found."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Directory ./envs/${{ matrix.environment }} exists."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: false

      - name: Set up Terraform
        if: steps.check-dir.outputs.skip == 'false'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        if: steps.check-dir.outputs.skip == 'false'
        working-directory: ./envs/${{ matrix.environment }}
        run: terraform init

      - name: Terraform Format
        if: steps.check-dir.outputs.skip == 'false'
        working-directory: ./envs/${{ matrix.environment }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        if: steps.check-dir.outputs.skip == 'false'
        working-directory: ./envs/${{ matrix.environment }}
        run: terraform validate

      - name: Terraform Plan
        if: steps.check-dir.outputs.skip == 'false'
        working-directory: ./envs/${{ matrix.environment }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply (only on main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check-dir.outputs.skip == 'false'
        working-directory: ./envs/${{ matrix.environment }}
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Log Skip
        if: steps.check-dir.outputs.skip == 'true'
        run: |
          echo "Skipped matrix.environment: ${{ matrix.environment }} because ./envs/${{ matrix.environment }} does not exist."

